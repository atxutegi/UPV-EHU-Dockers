<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE scenario SYSTEM "sipp.dtd">

<!-- This program is free software; you can redistribute it and/or      -->
<!-- modify it under the terms of the GNU General Public License as     -->
<!-- published by the Free Software Foundation; either version 2 of the -->
<!-- License, or (at your option) any later version.                    -->
<!--                                                                    -->
<!-- This program is distributed in the hope that it will be useful,    -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of     -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      -->
<!-- GNU General Public License for more details.                       -->
<!--                                                                    -->
<!-- You should have received a copy of the GNU General Public License  -->
<!-- along with this program; if not, write to the                      -->
<!-- Free Software Foundation, Inc.,                                    -->
<!-- 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA             -->
<!--                                                                    -->
<!--          IMS Benchmark Calling scenario - UAS side                 -->
<!--                                                                    -->
<!-- Author : David Verbeiren from Intel Corporation - July 2007        -->
<!--          Xavier Simonart from Intel Corporation - July 2007        -->
<!--          Philippe Lecluse from Intel Corporation - July 2007       -->
<!--                                                                    -->
 
<scenario name="POC-ANSWER">

 <!-- scenario (we got the 'req_user' request), our SIP scenario should start by a -->
 <!-- expecting an incoming SIP message                                            -->

  <recv request="INVITE">
   <!-- The imestamp, stored in rtd[2], will be reported to UAC side at end of -->
   <!-- scenario so it can compute the time the INVITE took from UAC to UAS.   -->
   <!-- rtd[5] measures the ringing time (between receiving INVITE and sending -->
   <!-- 200 OK.                                                                -->
    <action>
      <ereg regexp="m=application ([[:alnum:]]*) udp MCPTT*" search_in="body" check_it="true" assign_to="3,4"/>
      <ereg regexp="c=IN IP4 (([0-9]{1,3}\.){3}[0-9]{1,3})" search_in="body" check_it="true" assign_to="5,6"/>
      <log message="MCPTT port: [$4]. Stuff: [$3]" />
      <log message="MCPTT IP: [$6]. Stuff: [$5]" />
    </action>
  </recv>

  <send retrans="500"> 
    <![CDATA[

      SIP/2.0 200 OK
      [last_Via:]
      [last_Record-Route:]
      [last_From:]
      [last_To:];tag=[pid]-[call_number]
      [last_Call-ID:]
      [last_CSeq:]
      Contact: <sip:[field0]@[local_ip]:[local_port];transport=[transport]>;+g.3gpp.icsi-ref="urn%3Aurn-7%3A3gpp-service.ims.icsi.mcptt";+g.3gpp.mcptt
      Content-Type: multipart/mixed;boundary=3SeypFNr4g1gF
      Content-Length: [len]

      --3SeypFNr4g1gF
      Content-Type: application/sdp

      v=0
      o=MCPTTCLIENT 1183811731 4248272445 IN IP4 [media_ip]
      s=-
      c=IN IP4 [media_ip]
      t=0 0
      m=audio [media_port] RTP/AVP 0
      a=label:1
      i=speech
      a=rtpmap:0 PCMU/8000/1
      a=ptime:20
      a=maxptime:240
      m=application 1236 udp MCPTT
      a=fmtp:MCPTT mc_queueing;mc_priority=5

      --3SeypFNr4g1gF
      Content-Type: application/vnd.3gpp.mcptt-info+xml

      <?xml version="1.0" encoding="UTF-8"?>
      <mcpttinfo xmlns="urn:3gpp:ns:mcpttInfo:1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <mcptt-Params>
          <mcptt-called-party-id type="Normal">
            <mcpttURI>sip:[field3]@[field4]</mcpttURI>
          </mcptt-called-party-id>
        </mcptt-Params>
      </mcpttinfo>

      --3SeypFNr4g1gF--
    ]]>
  </send>

  <nop>
   <action>
   <exec command="nc -l -u 1236 > mcptt-packets-callee.dat 2>mcptt-packets-callee-error.log &"/>
   </action>
  </nop>

  <recv request="ACK">
  </recv>

  <nop>
    <action>
     <exec command="sendip -p ipv4 -is [local_ip] -p udp -us 1236 -ud [$4] -d 0x84cc0003c71a42524d43505474028000 [$6]"/>
    </action>
  </nop>

  <nop>
    <action>
    <exec play_pcap_audio="pcap/audio_stream_rtp_pcmu_short.pcap"/>
    </action>
  </nop>

  <pause milliseconds="35000"/>

<!-- REQUEST -->
  <nop>
    <action>
     <exec command="sendip -p ipv4 -is [local_ip] -p udp -us 1236 -ud [$4] -d 0x80cc0004c71a42524d4350546602050074028000 [$6]"/>
    </action>
  </nop>

  <nop>
    <action>
    <exec play_pcap_audio="pcap/audio_stream_rtp_pcmu_short.pcap"/>
    </action>
  </nop>

  <pause milliseconds="12000"/>

<!-- RELEASE -->
  <nop>
    <action>
     <exec command="sendip -p ipv4 -is [local_ip] -p udp -us 1236 -ud [$4] -d 0x84cc0003c71a42524d43505474028000 [$6]"/>
    </action>
  </nop>


 
  <recv request="BYE">
  </recv>

  <send crlf="true">
    <![CDATA[

      SIP/2.0 200 OK
      [last_Via:]
      [last_From:]
      [last_To:];tag=[pid]-[call_number]
      [last_Call-ID:]
      [last_CSeq:]
      Content-Length: 0

    ]]>
  </send>

  <pause milliseconds="2000"/>
   <!-- Keep the call open for a while in case the 200 is lost to be     -->
   <!-- able to retransmit it if we receive the BYE again.               -->

  <!-- definition of the response time repartition table (unit is ms)   -->
  <ResponseTimeRepartition value="10, 20, 30, 40, 50, 100, 150, 200"/>

  <!-- definition of the call length repartition table (unit is ms)     -->
  <CallLengthRepartition value="10, 50, 100, 500, 1000, 5000, 10000"/>
